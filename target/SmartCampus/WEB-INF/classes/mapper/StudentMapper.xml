<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bupt.sse.SmartCampus.dao.StudentMapper">
  <resultMap id="BaseResultMap" type="bupt.sse.SmartCampus.model.Student">
    <id column="studentId" jdbcType="VARCHAR" property="studentid" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
    <result column="classId" jdbcType="VARCHAR" property="classid" />
    <result column="grade" jdbcType="CHAR" property="grade" />
    <result column="weightScore" jdbcType="DOUBLE" property="weightscore" />
    <result column="studentRank" jdbcType="INTEGER" property="studentrank" />
    <result column="failureNum" jdbcType="INTEGER" property="failurenum" />
    <result column="failureCredit" jdbcType="INTEGER" property="failurecredit" />
    <result column="grind" jdbcType="INTEGER" property="grind" />
    <result column="fail" jdbcType="INTEGER" property="fail" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    studentId, password, studentName, classId, grade, weightScore, studentRank, failureNum, 
    failureCredit, grind, fail
  </sql>
  <select id="selectByExample" parameterType="bupt.sse.SmartCampus.model.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student
    where studentId = #{studentid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from student
    where studentId = #{studentid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="bupt.sse.SmartCampus.model.StudentExample">
    delete from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="bupt.sse.SmartCampus.model.Student">
    insert into student (studentId, password, studentName, 
      classId, grade, weightScore, 
      studentRank, failureNum, failureCredit, 
      grind, fail)
    values (#{studentid,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{studentname,jdbcType=VARCHAR}, 
      #{classid,jdbcType=VARCHAR}, #{grade,jdbcType=CHAR}, #{weightscore,jdbcType=DOUBLE}, 
      #{studentrank,jdbcType=INTEGER}, #{failurenum,jdbcType=INTEGER}, #{failurecredit,jdbcType=INTEGER}, 
      #{grind,jdbcType=INTEGER}, #{fail,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="bupt.sse.SmartCampus.model.Student">
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="studentid != null">
        studentId,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="studentname != null">
        studentName,
      </if>
      <if test="classid != null">
        classId,
      </if>
      <if test="grade != null">
        grade,
      </if>
      <if test="weightscore != null">
        weightScore,
      </if>
      <if test="studentrank != null">
        studentRank,
      </if>
      <if test="failurenum != null">
        failureNum,
      </if>
      <if test="failurecredit != null">
        failureCredit,
      </if>
      <if test="grind != null">
        grind,
      </if>
      <if test="fail != null">
        fail,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="studentid != null">
        #{studentid,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="studentname != null">
        #{studentname,jdbcType=VARCHAR},
      </if>
      <if test="classid != null">
        #{classid,jdbcType=VARCHAR},
      </if>
      <if test="grade != null">
        #{grade,jdbcType=CHAR},
      </if>
      <if test="weightscore != null">
        #{weightscore,jdbcType=DOUBLE},
      </if>
      <if test="studentrank != null">
        #{studentrank,jdbcType=INTEGER},
      </if>
      <if test="failurenum != null">
        #{failurenum,jdbcType=INTEGER},
      </if>
      <if test="failurecredit != null">
        #{failurecredit,jdbcType=INTEGER},
      </if>
      <if test="grind != null">
        #{grind,jdbcType=INTEGER},
      </if>
      <if test="fail != null">
        #{fail,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="bupt.sse.SmartCampus.model.StudentExample" resultType="java.lang.Long">
    select count(*) from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update student
    <set>
      <if test="record.studentid != null">
        studentId = #{record.studentid,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.studentname != null">
        studentName = #{record.studentname,jdbcType=VARCHAR},
      </if>
      <if test="record.classid != null">
        classId = #{record.classid,jdbcType=VARCHAR},
      </if>
      <if test="record.grade != null">
        grade = #{record.grade,jdbcType=CHAR},
      </if>
      <if test="record.weightscore != null">
        weightScore = #{record.weightscore,jdbcType=DOUBLE},
      </if>
      <if test="record.studentrank != null">
        studentRank = #{record.studentrank,jdbcType=INTEGER},
      </if>
      <if test="record.failurenum != null">
        failureNum = #{record.failurenum,jdbcType=INTEGER},
      </if>
      <if test="record.failurecredit != null">
        failureCredit = #{record.failurecredit,jdbcType=INTEGER},
      </if>
      <if test="record.grind != null">
        grind = #{record.grind,jdbcType=INTEGER},
      </if>
      <if test="record.fail != null">
        fail = #{record.fail,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update student
    set studentId = #{record.studentid,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      studentName = #{record.studentname,jdbcType=VARCHAR},
      classId = #{record.classid,jdbcType=VARCHAR},
      grade = #{record.grade,jdbcType=CHAR},
      weightScore = #{record.weightscore,jdbcType=DOUBLE},
      studentRank = #{record.studentrank,jdbcType=INTEGER},
      failureNum = #{record.failurenum,jdbcType=INTEGER},
      failureCredit = #{record.failurecredit,jdbcType=INTEGER},
      grind = #{record.grind,jdbcType=INTEGER},
      fail = #{record.fail,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="bupt.sse.SmartCampus.model.Student">
    update student
    <set>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="studentname != null">
        studentName = #{studentname,jdbcType=VARCHAR},
      </if>
      <if test="classid != null">
        classId = #{classid,jdbcType=VARCHAR},
      </if>
      <if test="grade != null">
        grade = #{grade,jdbcType=CHAR},
      </if>
      <if test="weightscore != null">
        weightScore = #{weightscore,jdbcType=DOUBLE},
      </if>
      <if test="studentrank != null">
        studentRank = #{studentrank,jdbcType=INTEGER},
      </if>
      <if test="failurenum != null">
        failureNum = #{failurenum,jdbcType=INTEGER},
      </if>
      <if test="failurecredit != null">
        failureCredit = #{failurecredit,jdbcType=INTEGER},
      </if>
      <if test="grind != null">
        grind = #{grind,jdbcType=INTEGER},
      </if>
      <if test="fail != null">
        fail = #{fail,jdbcType=INTEGER},
      </if>
    </set>
    where studentId = #{studentid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="bupt.sse.SmartCampus.model.Student">
    update student
    set password = #{password,jdbcType=VARCHAR},
      studentName = #{studentname,jdbcType=VARCHAR},
      classId = #{classid,jdbcType=VARCHAR},
      grade = #{grade,jdbcType=CHAR},
      weightScore = #{weightscore,jdbcType=DOUBLE},
      studentRank = #{studentrank,jdbcType=INTEGER},
      failureNum = #{failurenum,jdbcType=INTEGER},
      failureCredit = #{failurecredit,jdbcType=INTEGER},
      grind = #{grind,jdbcType=INTEGER},
      fail = #{fail,jdbcType=INTEGER}
    where studentId = #{studentid,jdbcType=VARCHAR}
  </update>

  <select id="countStudentByGrind" resultType="java.lang.Integer">
    select count(*) from (
    select * from scoreanalysis.student
    where grind = #{grind,jdbcType=INTEGER}
    and grade != 0) s
    group by grade;
  </select>
  <select id="sumStudentByGrind" resultType="java.lang.Integer">
    select count(*) from scoreanalysis.student
    where grind = #{grind,jdbcType=INTEGER}
    and grade != 0;
  </select>

  <!--<resultMap id="failResultMap"   type="HashMap">-->
  <!--<result property="key" column="fail" jdbcType="INTEGER" javaType="java.lang.Integer" />-->
  <!--<result property="value" column="num" jdbcType="INTEGER" javaType="java.lang.Integer" />-->
  <!--</resultMap>-->

  <!--<select id="test" resultType="java.util.HashMap">-->
  <!--select fail ,count(*) as num from (-->
  <!--select * from scoreanalysis.student-->
  <!--where grade = #{grade,jdbcType=INTEGER}) s-->
  <!--group by fail;-->
  <!--</select>-->

  <select id="countFailByGrade" resultType="java.lang.Integer">
    select count(*) from (
    select * from scoreanalysis.student
    where grade = #{grade,jdbcType=INTEGER}) s
    group by fail;
  </select>
  <select id="sumStudentByFail" resultType="java.lang.Integer">
    select count(*) from scoreanalysis.student
    where fail = #{fail,jdbcType=INTEGER}
    and grade != 0;
  </select>

</mapper>