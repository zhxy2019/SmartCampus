<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bupt.sse.SmartCampus.dao.StudentCourseMapper">
  <resultMap id="BaseResultMap" type="bupt.sse.SmartCampus.model.StudentCourse">
    <id column="collegeId" jdbcType="VARCHAR" property="collegeid" />
    <id column="majorId" jdbcType="VARCHAR" property="majorid" />
    <id column="courseId" jdbcType="VARCHAR" property="courseid" />
    <id column="year" jdbcType="VARCHAR" property="year" />
    <id column="term" jdbcType="INTEGER" property="term" />
    <id column="studentId" jdbcType="VARCHAR" property="studentid" />
    <result column="score" jdbcType="INTEGER" property="score" />
    <result column="studentRank" jdbcType="INTEGER" property="studentrank" />
    <result column="flag" jdbcType="INTEGER" property="flag" />
    <result column="great" jdbcType="INTEGER" property="great" />
    <result column="first" jdbcType="INTEGER" property="first" />
    <result column="pass" jdbcType="INTEGER" property="pass" />
    <result column="grade" jdbcType="VARCHAR" property="grade" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    collegeId, majorId, courseId, year, term, studentId, score, studentRank, flag, great, 
    first, pass, grade
  </sql>
  <select id="selectByExample" parameterType="bupt.sse.SmartCampus.model.StudentCourseExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student_course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="bupt.sse.SmartCampus.model.StudentCourseKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student_course
    where collegeId = #{collegeid,jdbcType=VARCHAR}
      and majorId = #{majorid,jdbcType=VARCHAR}
      and courseId = #{courseid,jdbcType=VARCHAR}
      and year = #{year,jdbcType=VARCHAR}
      and term = #{term,jdbcType=INTEGER}
      and studentId = #{studentid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="bupt.sse.SmartCampus.model.StudentCourseKey">
    delete from student_course
    where collegeId = #{collegeid,jdbcType=VARCHAR}
      and majorId = #{majorid,jdbcType=VARCHAR}
      and courseId = #{courseid,jdbcType=VARCHAR}
      and year = #{year,jdbcType=VARCHAR}
      and term = #{term,jdbcType=INTEGER}
      and studentId = #{studentid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="bupt.sse.SmartCampus.model.StudentCourseExample">
    delete from student_course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="bupt.sse.SmartCampus.model.StudentCourse">
    insert into student_course (collegeId, majorId, courseId, 
      year, term, studentId, 
      score, studentRank, flag, 
      great, first, pass, 
      grade)
    values (#{collegeid,jdbcType=VARCHAR}, #{majorid,jdbcType=VARCHAR}, #{courseid,jdbcType=VARCHAR}, 
      #{year,jdbcType=VARCHAR}, #{term,jdbcType=INTEGER}, #{studentid,jdbcType=VARCHAR}, 
      #{score,jdbcType=INTEGER}, #{studentrank,jdbcType=INTEGER}, #{flag,jdbcType=INTEGER}, 
      #{great,jdbcType=INTEGER}, #{first,jdbcType=INTEGER}, #{pass,jdbcType=INTEGER}, 
      #{grade,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="bupt.sse.SmartCampus.model.StudentCourse">
    insert into student_course
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="collegeid != null">
        collegeId,
      </if>
      <if test="majorid != null">
        majorId,
      </if>
      <if test="courseid != null">
        courseId,
      </if>
      <if test="year != null">
        year,
      </if>
      <if test="term != null">
        term,
      </if>
      <if test="studentid != null">
        studentId,
      </if>
      <if test="score != null">
        score,
      </if>
      <if test="studentrank != null">
        studentRank,
      </if>
      <if test="flag != null">
        flag,
      </if>
      <if test="great != null">
        great,
      </if>
      <if test="first != null">
        first,
      </if>
      <if test="pass != null">
        pass,
      </if>
      <if test="grade != null">
        grade,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="collegeid != null">
        #{collegeid,jdbcType=VARCHAR},
      </if>
      <if test="majorid != null">
        #{majorid,jdbcType=VARCHAR},
      </if>
      <if test="courseid != null">
        #{courseid,jdbcType=VARCHAR},
      </if>
      <if test="year != null">
        #{year,jdbcType=VARCHAR},
      </if>
      <if test="term != null">
        #{term,jdbcType=INTEGER},
      </if>
      <if test="studentid != null">
        #{studentid,jdbcType=VARCHAR},
      </if>
      <if test="score != null">
        #{score,jdbcType=INTEGER},
      </if>
      <if test="studentrank != null">
        #{studentrank,jdbcType=INTEGER},
      </if>
      <if test="flag != null">
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="great != null">
        #{great,jdbcType=INTEGER},
      </if>
      <if test="first != null">
        #{first,jdbcType=INTEGER},
      </if>
      <if test="pass != null">
        #{pass,jdbcType=INTEGER},
      </if>
      <if test="grade != null">
        #{grade,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="bupt.sse.SmartCampus.model.StudentCourseExample" resultType="java.lang.Long">
    select count(*) from student_course
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update student_course
    <set>
      <if test="record.collegeid != null">
        collegeId = #{record.collegeid,jdbcType=VARCHAR},
      </if>
      <if test="record.majorid != null">
        majorId = #{record.majorid,jdbcType=VARCHAR},
      </if>
      <if test="record.courseid != null">
        courseId = #{record.courseid,jdbcType=VARCHAR},
      </if>
      <if test="record.year != null">
        year = #{record.year,jdbcType=VARCHAR},
      </if>
      <if test="record.term != null">
        term = #{record.term,jdbcType=INTEGER},
      </if>
      <if test="record.studentid != null">
        studentId = #{record.studentid,jdbcType=VARCHAR},
      </if>
      <if test="record.score != null">
        score = #{record.score,jdbcType=INTEGER},
      </if>
      <if test="record.studentrank != null">
        studentRank = #{record.studentrank,jdbcType=INTEGER},
      </if>
      <if test="record.flag != null">
        flag = #{record.flag,jdbcType=INTEGER},
      </if>
      <if test="record.great != null">
        great = #{record.great,jdbcType=INTEGER},
      </if>
      <if test="record.first != null">
        first = #{record.first,jdbcType=INTEGER},
      </if>
      <if test="record.pass != null">
        pass = #{record.pass,jdbcType=INTEGER},
      </if>
      <if test="record.grade != null">
        grade = #{record.grade,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update student_course
    set collegeId = #{record.collegeid,jdbcType=VARCHAR},
      majorId = #{record.majorid,jdbcType=VARCHAR},
      courseId = #{record.courseid,jdbcType=VARCHAR},
      year = #{record.year,jdbcType=VARCHAR},
      term = #{record.term,jdbcType=INTEGER},
      studentId = #{record.studentid,jdbcType=VARCHAR},
      score = #{record.score,jdbcType=INTEGER},
      studentRank = #{record.studentrank,jdbcType=INTEGER},
      flag = #{record.flag,jdbcType=INTEGER},
      great = #{record.great,jdbcType=INTEGER},
      first = #{record.first,jdbcType=INTEGER},
      pass = #{record.pass,jdbcType=INTEGER},
      grade = #{record.grade,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="bupt.sse.SmartCampus.model.StudentCourse">
    update student_course
    <set>
      <if test="score != null">
        score = #{score,jdbcType=INTEGER},
      </if>
      <if test="studentrank != null">
        studentRank = #{studentrank,jdbcType=INTEGER},
      </if>
      <if test="flag != null">
        flag = #{flag,jdbcType=INTEGER},
      </if>
      <if test="great != null">
        great = #{great,jdbcType=INTEGER},
      </if>
      <if test="first != null">
        first = #{first,jdbcType=INTEGER},
      </if>
      <if test="pass != null">
        pass = #{pass,jdbcType=INTEGER},
      </if>
      <if test="grade != null">
        grade = #{grade,jdbcType=VARCHAR},
      </if>
    </set>
    where collegeId = #{collegeid,jdbcType=VARCHAR}
      and majorId = #{majorid,jdbcType=VARCHAR}
      and courseId = #{courseid,jdbcType=VARCHAR}
      and year = #{year,jdbcType=VARCHAR}
      and term = #{term,jdbcType=INTEGER}
      and studentId = #{studentid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="bupt.sse.SmartCampus.model.StudentCourse">
    update student_course
    set score = #{score,jdbcType=INTEGER},
      studentRank = #{studentrank,jdbcType=INTEGER},
      flag = #{flag,jdbcType=INTEGER},
      great = #{great,jdbcType=INTEGER},
      first = #{first,jdbcType=INTEGER},
      pass = #{pass,jdbcType=INTEGER},
      grade = #{grade,jdbcType=VARCHAR}
    where collegeId = #{collegeid,jdbcType=VARCHAR}
      and majorId = #{majorid,jdbcType=VARCHAR}
      and courseId = #{courseid,jdbcType=VARCHAR}
      and year = #{year,jdbcType=VARCHAR}
      and term = #{term,jdbcType=INTEGER}
      and studentId = #{studentid,jdbcType=VARCHAR}
  </update>
  <!--<select id="getStudentCourseDataByStudentId" resultType="bupt.sse.SmartCampus.model.StudentCourse">-->
    <!--select * from student_course-->
    <!--where studentId=#{studentId,jdbcType=INTEGER}-->
    <!--and year=#{year,jdbcType=VARCHAR}-->
    <!--order by term;-->
  <!--</select>-->

  <select id="getCourseDataByStudentId" resultType="java.util.Map">
    select * from student_course sc,course c where sc.courseId=c.courseId
    and sc.studentId=#{studentId,jdbcType=VARCHAR}
    and sc.year=#{year,jdbcType=VARCHAR}
    order by term;
  </select>
  
</mapper>