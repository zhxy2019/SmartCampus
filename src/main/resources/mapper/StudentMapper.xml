<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bupt.sse.SmartCampus.dao.StudentMapper">
  <resultMap id="BaseResultMap" type="bupt.sse.SmartCampus.model.Student">
    <id column="studentId" jdbcType="VARCHAR" property="studentid" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
    <result column="classId" jdbcType="VARCHAR" property="classid" />
    <result column="grade" jdbcType="CHAR" property="grade" />
    <result column="weightScore" jdbcType="DOUBLE" property="weightscore" />
    <result column="studentRank" jdbcType="INTEGER" property="studentrank" />
    <result column="failureNum" jdbcType="INTEGER" property="failurenum" />
    <result column="failureCredit" jdbcType="INTEGER" property="failurecredit" />
    <result column="grind" jdbcType="INTEGER" property="grind" />
    <result column="fail" jdbcType="INTEGER" property="fail" />
  </resultMap>
  <resultMap id="BaseResultMapWithPredictInfo" type="bupt.sse.SmartCampus.model.Student">
    <id column="studentId" jdbcType="VARCHAR" property="studentid" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="studentName" jdbcType="VARCHAR" property="studentname" />
    <result column="classId" jdbcType="VARCHAR" property="classid" />
    <result column="grade" jdbcType="CHAR" property="grade" />
    <result column="weightScore" jdbcType="DOUBLE" property="weightscore" />
    <result column="studentRank" jdbcType="INTEGER" property="studentrank" />
    <result column="failureNum" jdbcType="INTEGER" property="failurenum" />
    <result column="failureCredit" jdbcType="INTEGER" property="failurecredit" />
    <result column="grind" jdbcType="INTEGER" property="grind" />
    <result column="fail" jdbcType="INTEGER" property="fail" />
    <result column="predictFailNum" jdbcType="INTEGER" property="predictfailnum" />
    <result column="collegeName" jdbcType="INTEGER" property="collegename" />
    <result column="majorName" jdbcType="INTEGER" property="majorname" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    studentId, password, studentName, classId, grade, weightScore, studentRank, failureNum, 
    failureCredit, grind, fail
  </sql>
  <select id="selectByExample" parameterType="bupt.sse.SmartCampus.model.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from student
    where studentId = #{studentid,jdbcType=VARCHAR}
  </select>
  <select id="selectFailPercentage" resultType="java.util.HashMap">
    select
    co.collegeName as collegeName,sum(case when s.failureNum>0 then 1 else 0 end)/count(*) as percentage
    from student s,class c,college co
    where s.classId=c.classId and c.collegeId=co.collegeId and s.grade>#{grade} group by co.collegeId;
  </select>
  <select id="selectStudentWithPredictNum" resultMap="BaseResultMapWithPredictInfo">
    select * from(
    select
    s.studentId,s.studentName,s.classId,s.grade,format(s.weightScore,2) as weightScore,s.studentRank,s.failureNum,s.failureCredit,s.grind,s.fail,sum(case when ps.predictScore=1 then 1 else 0 end) as predictFailNum,co.collegeName,co.majorName
    from student s, class c, college co, predictscore ps
    where s.classId=c.classId and c.collegeId=co.collegeId and c.majorId=co.majorId and s.studentId=ps.studentId
     and co.collegeName=#{collegeName,jdbcType=VARCHAR} and s.grade>#{currentGrade}
    group by s.studentId
    order by predictFailNum desc,s.failureNum desc)as sel where predictFailNum>0
  </select>
  <select id="selectStudentWithPredictNumInClasses" resultMap="BaseResultMapWithPredictInfo">
    select * from(
    select
    s.studentId,s.studentName,s.classId,s.grade,format(s.weightScore,2) as weightScore,s.studentRank,s.failureNum,s.failureCredit,s.grind,s.fail,sum(case when ps.predictScore=1 then 1 else 0 end) as predictFailNum
    from student s, class c, predictscore ps
    where s.classId=c.classId and s.studentId=ps.studentId
     and s.grade>#{currentGrade} and c.classId in
    <foreach collection="classIdList" item="id" index="index" open="(" close=")" separator=",">
      #{id}
    </foreach>
    group by s.studentId
    order by predictFailNum desc,s.failureNum desc)as sel where predictFailNum>0
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from student
    where studentId = #{studentid,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="bupt.sse.SmartCampus.model.StudentExample">
    delete from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="bupt.sse.SmartCampus.model.Student">
    insert into student (studentId, password, studentName, 
      classId, grade, weightScore, 
      studentRank, failureNum, failureCredit, 
      grind, fail)
    values (#{studentid,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{studentname,jdbcType=VARCHAR}, 
      #{classid,jdbcType=VARCHAR}, #{grade,jdbcType=CHAR}, #{weightscore,jdbcType=DOUBLE}, 
      #{studentrank,jdbcType=INTEGER}, #{failurenum,jdbcType=INTEGER}, #{failurecredit,jdbcType=INTEGER}, 
      #{grind,jdbcType=INTEGER}, #{fail,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="bupt.sse.SmartCampus.model.Student">
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="studentid != null">
        studentId,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="studentname != null">
        studentName,
      </if>
      <if test="classid != null">
        classId,
      </if>
      <if test="grade != null">
        grade,
      </if>
      <if test="weightscore != null">
        weightScore,
      </if>
      <if test="studentrank != null">
        studentRank,
      </if>
      <if test="failurenum != null">
        failureNum,
      </if>
      <if test="failurecredit != null">
        failureCredit,
      </if>
      <if test="grind != null">
        grind,
      </if>
      <if test="fail != null">
        fail,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="studentid != null">
        #{studentid,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="studentname != null">
        #{studentname,jdbcType=VARCHAR},
      </if>
      <if test="classid != null">
        #{classid,jdbcType=VARCHAR},
      </if>
      <if test="grade != null">
        #{grade,jdbcType=CHAR},
      </if>
      <if test="weightscore != null">
        #{weightscore,jdbcType=DOUBLE},
      </if>
      <if test="studentrank != null">
        #{studentrank,jdbcType=INTEGER},
      </if>
      <if test="failurenum != null">
        #{failurenum,jdbcType=INTEGER},
      </if>
      <if test="failurecredit != null">
        #{failurecredit,jdbcType=INTEGER},
      </if>
      <if test="grind != null">
        #{grind,jdbcType=INTEGER},
      </if>
      <if test="fail != null">
        #{fail,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="bupt.sse.SmartCampus.model.StudentExample" resultType="java.lang.Long">
    select count(*) from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update student
    <set>
      <if test="record.studentid != null">
        studentId = #{record.studentid,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.studentname != null">
        studentName = #{record.studentname,jdbcType=VARCHAR},
      </if>
      <if test="record.classid != null">
        classId = #{record.classid,jdbcType=VARCHAR},
      </if>
      <if test="record.grade != null">
        grade = #{record.grade,jdbcType=CHAR},
      </if>
      <if test="record.weightscore != null">
        weightScore = #{record.weightscore,jdbcType=DOUBLE},
      </if>
      <if test="record.studentrank != null">
        studentRank = #{record.studentrank,jdbcType=INTEGER},
      </if>
      <if test="record.failurenum != null">
        failureNum = #{record.failurenum,jdbcType=INTEGER},
      </if>
      <if test="record.failurecredit != null">
        failureCredit = #{record.failurecredit,jdbcType=INTEGER},
      </if>
      <if test="record.grind != null">
        grind = #{record.grind,jdbcType=INTEGER},
      </if>
      <if test="record.fail != null">
        fail = #{record.fail,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update student
    set studentId = #{record.studentid,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      studentName = #{record.studentname,jdbcType=VARCHAR},
      classId = #{record.classid,jdbcType=VARCHAR},
      grade = #{record.grade,jdbcType=CHAR},
      weightScore = #{record.weightscore,jdbcType=DOUBLE},
      studentRank = #{record.studentrank,jdbcType=INTEGER},
      failureNum = #{record.failurenum,jdbcType=INTEGER},
      failureCredit = #{record.failurecredit,jdbcType=INTEGER},
      grind = #{record.grind,jdbcType=INTEGER},
      fail = #{record.fail,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="bupt.sse.SmartCampus.model.Student">
    update student
    <set>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="studentname != null">
        studentName = #{studentname,jdbcType=VARCHAR},
      </if>
      <if test="classid != null">
        classId = #{classid,jdbcType=VARCHAR},
      </if>
      <if test="grade != null">
        grade = #{grade,jdbcType=CHAR},
      </if>
      <if test="weightscore != null">
        weightScore = #{weightscore,jdbcType=DOUBLE},
      </if>
      <if test="studentrank != null">
        studentRank = #{studentrank,jdbcType=INTEGER},
      </if>
      <if test="failurenum != null">
        failureNum = #{failurenum,jdbcType=INTEGER},
      </if>
      <if test="failurecredit != null">
        failureCredit = #{failurecredit,jdbcType=INTEGER},
      </if>
      <if test="grind != null">
        grind = #{grind,jdbcType=INTEGER},
      </if>
      <if test="fail != null">
        fail = #{fail,jdbcType=INTEGER},
      </if>
    </set>
    where studentId = #{studentid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="bupt.sse.SmartCampus.model.Student">
    update student
    set password = #{password,jdbcType=VARCHAR},
      studentName = #{studentname,jdbcType=VARCHAR},
      classId = #{classid,jdbcType=VARCHAR},
      grade = #{grade,jdbcType=CHAR},
      weightScore = #{weightscore,jdbcType=DOUBLE},
      studentRank = #{studentrank,jdbcType=INTEGER},
      failureNum = #{failurenum,jdbcType=INTEGER},
      failureCredit = #{failurecredit,jdbcType=INTEGER},
      grind = #{grind,jdbcType=INTEGER},
      fail = #{fail,jdbcType=INTEGER}
    where studentId = #{studentid,jdbcType=VARCHAR}
  </update>


  <select id="countGrind" resultType="java.util.LinkedHashMap">
    select grade,
    count(if(grind=0,true,null)) as grind0,
    count(if(grind=1,true,null)) as grind1,
    count(if(grind=2,true,null)) as grind2
    from scoreanalysis.student
    where grade>=2006
    group by grade;
  </select>
  <select id="countGrindById" resultType="java.util.LinkedHashMap">
    select s.grade,
    count(if(s.grind=0,true,null)) as grind0,
    count(if(s.grind=1,true,null)) as grind1,
    count(if(s.grind=2,true,null)) as grind2
    from scoreanalysis.student s , scoreanalysis.class c
    where s.classId=c.classId
    and (c.collegeId=#{id,jdbcType=VARCHAR} or c.majorId=#{id,jdbcType=VARCHAR})
    and s.grade>=2006
    group by s.grade;
  </select>
  <select id="sumGrind" resultType="java.util.LinkedHashMap">
    select count(if(grind=0,true,null)) as grind0,
    count(if(grind=1,true,null)) as grind1,
    count(if(grind=2,true,null)) as grind2
    from scoreanalysis.student
    where grade>=2006;
  </select>
  <select id="sumGrindById" resultType="java.util.LinkedHashMap">
    select count(if(s.grind=0,true,null)) as grind0,
    count(if(s.grind=1,true,null)) as grind1,
    count(if(s.grind=2,true,null)) as grind2
    from scoreanalysis.student s , scoreanalysis.class c
    where s.classId=c.classId
    and (c.collegeId=#{id,jdbcType=VARCHAR} or c.majorId=#{id,jdbcType=VARCHAR})
    and s.grade>=2006;
  </select>
  <select id="sumStudentByGrind" resultType="java.lang.Integer">
    select count(*) from scoreanalysis.student
    where grind = #{grind,jdbcType=INTEGER}
    and grade != 0;
  </select>
  <select id="countGrind_counselor" resultType="java.util.LinkedHashMap">
    select
    count(if(s.grind=0,true,null)) as grind0,
    count(if(s.grind=1,true,null)) as grind1,
    count(if(s.grind=2,true,null)) as grind2
    from scoreanalysis.student as s, class as c
    where s.classId=c.classId
    and c.counselorId=#{counselorId,jdbcType=VARCHAR};
  </select>
  <select id="countGrindById_counselor" resultType="java.util.LinkedHashMap">
    select
    count(if(s.grind=0,true,null)) as grind0,
    count(if(s.grind=1,true,null)) as grind1,
    count(if(s.grind=2,true,null)) as grind2
    from scoreanalysis.student as s, class as c
    where s.classId=c.classId
    and c.classId=#{classId,jdbcType=VARCHAR}

  </select>


  <select id="countFail" resultType="java.util.LinkedHashMap">
    select grade,
    count(if(fail=0,true,null)) as fail0,
    count(if(fail=1,true,null)) as fail1,
    count(if(fail=2,true,null)) as fail2,
    count(if(fail=3,true,null)) as fail3
    from scoreanalysis.student
    where grade>=2006
    group by grade;
  </select>
  <select id="countFailById" resultType="java.util.LinkedHashMap">
    select s.grade,
    count(if(s.fail=0,true,null)) as fail0,
    count(if(s.fail=1,true,null)) as fail1,
    count(if(s.fail=2,true,null)) as fail2,
    count(if(s.fail=3,true,null)) as fail3
    from scoreanalysis.student s , scoreanalysis.class c
    where s.classId=c.classId
    and (c.collegeId=#{id,jdbcType=VARCHAR} or c.majorId=#{id,jdbcType=VARCHAR})
    and s.grade>=2006
    group by s.grade;
  </select>
  <select id="sumFail" resultType="java.util.LinkedHashMap">
    select
    count(if(fail=0,true,null)) as fail0,
    count(if(fail=1,true,null)) as fail1,
    count(if(fail=2,true,null)) as fail2,
    count(if(fail=3,true,null)) as fail3
    from scoreanalysis.student
    where grade>=2006;
  </select>
  <select id="sumFailById" resultType="java.util.LinkedHashMap">
    select
    count(if(s.fail=0,true,null)) as fail0,
    count(if(s.fail=1,true,null)) as fail1,
    count(if(s.fail=2,true,null)) as fail2,
    count(if(s.fail=3,true,null)) as fail3
    from scoreanalysis.student s , scoreanalysis.class c
    where s.classId=c.classId
    and (c.collegeId=#{id,jdbcType=VARCHAR} or c.majorId=#{id,jdbcType=VARCHAR})
    and s.grade>=2006;
  </select>
  <select id="sumStudentByFail" resultType="java.lang.Integer">
    select count(*) from scoreanalysis.student
    where fail = #{fail,jdbcType=INTEGER}
    and grade != 0;
  </select>
  <select id="countFail_counselor" resultType="java.util.LinkedHashMap">
    select
    count(if(s.fail=0,true,null)) as fail0,
    count(if(s.fail=1,true,null)) as fail1,
    count(if(s.fail=2,true,null)) as fail2,
    count(if(s.fail=3,true,null)) as fail3
    from scoreanalysis.student as s, class as c
    where s.classId=c.classId
    and c.counselorId=#{counselorId,jdbcType=VARCHAR};
  </select>
  <select id="countFailById_counselor" resultType="java.util.LinkedHashMap">
    select
    count(if(s.fail=0,true,null)) as fail0,
    count(if(s.fail=1,true,null)) as fail1,
    count(if(s.fail=2,true,null)) as fail2,
    count(if(s.fail=3,true,null)) as fail3
    from scoreanalysis.student as s, class as c
    where s.classId=c.classId
    and c.classId=#{classId,jdbcType=VARCHAR}
  </select>


<!--totalrecord教务员-->
  <select id="sumStudentByGrindAndGrade" resultType="java.lang.Integer">
    select count(*) from scoreanalysis.student
    where grind = #{grind,jdbcType=INTEGER}
    and grade = #{grade,jdbcType=CHAR};
  </select>
  <select id="sumStudentByFailAndGrade" resultType="java.lang.Integer">
    select count(*) from scoreanalysis.student
    where fail = #{fail,jdbcType=INTEGER}
    and grade = #{grade,jdbcType=CHAR};
  </select>
  <select id="sumStudentByGrindAndGradeAndId" resultType="java.lang.Integer">
    select count(*)
    from scoreanalysis.student as s,scoreanalysis.class as c
    where s.classId=c.classId
    and s.grind = #{grind,jdbcType=INTEGER}
    and s.grade = #{grade,jdbcType=CHAR}
    and (c.collegeId=#{id,jdbcType=VARCHAR} or c.majorId=#{id,jdbcType=VARCHAR});
  </select>
  <select id="sumStudentByFailAndGradeAndId" resultType="java.lang.Integer">
    select count(*)
    from scoreanalysis.student as s,scoreanalysis.class as c
    where s.classId=c.classId
    and s.fail = #{fail,jdbcType=INTEGER}
    and s.grade = #{grade,jdbcType=CHAR}
    and (c.collegeId=#{id,jdbcType=VARCHAR} or c.majorId=#{id,jdbcType=VARCHAR});
  </select>
  <!--totalrecord辅导员-->
  <select id="sumStudentByGrind_counselor" resultType="java.lang.Integer">
    select count(*)
    from scoreanalysis.student as s,scoreanalysis.class as c
    where s.classId=c.classId
    and s.grind = #{grind,jdbcType=INTEGER}
    and c.counselorId = #{counselorId,jdbcType=VARCHAR};
  </select>
  <select id="sumStudentByFail_counselor" resultType="java.lang.Integer">
    select count(*)
    from scoreanalysis.student as s,scoreanalysis.class as c
    where s.classId=c.classId
    and s.fail = #{fail,jdbcType=INTEGER}
    and c.counselorId = #{counselorId,jdbcType=VARCHAR};
  </select>
  <select id="sumStudentByGrindAndId_counselor" resultType="java.lang.Integer">
    select count(*)
    from scoreanalysis.student as s,scoreanalysis.class as c
    where s.classId=c.classId
    and s.grind = #{grind,jdbcType=INTEGER}
    and c.classId=#{classId,jdbcType=VARCHAR};
  </select>
  <select id="sumStudentByFailAndId_counselor" resultType="java.lang.Integer">
    select count(*)
    from scoreanalysis.student as s,scoreanalysis.class as c
    where s.classId=c.classId
    and s.fail = #{fail,jdbcType=INTEGER}
    and c.classId=#{classId,jdbcType=VARCHAR};
  </select>


<!--学生列表-教务员-->
  <select id="getGrindStudentDataByPage" resultType="bupt.sse.SmartCampus.model.Student">
  select * from scoreanalysis.student
  where grind = #{grind,jdbcType=INTEGER} and grade =#{grade,jdbcType=CHAR}
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>
  <select id="getFailStudentDataByPage" resultType="bupt.sse.SmartCampus.model.Student">
  select * from scoreanalysis.student
  where fail = #{fail,jdbcType=INTEGER} and grade =#{grade,jdbcType=CHAR}
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>
  <select id="getAscendStudentDataByPage" resultType="bupt.sse.SmartCampus.model.Student">
  select s.*
  from scoreanalysis.student as s,scoreanalysis.studentstudy as ss
  where s.studentId=ss.studentId
  and ss.ascend = #{ascend,jdbcType=INTEGER}
  and ss.year like #{year,jdbcType=VARCHAR}
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>

  <select id="getGrindStudentDataByPageAndId" resultType="bupt.sse.SmartCampus.model.Student">
  select s.*
  from scoreanalysis.student as s,scoreanalysis.class as c
  where s.classId=c.classId
  and s.grind = #{grind,jdbcType=INTEGER}
  and s.grade =#{grade,jdbcType=CHAR}
  and (c.collegeId=#{id,jdbcType=VARCHAR} or c.majorId=#{id,jdbcType=VARCHAR})
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>
  <select id="getFailStudentDataByPageAndId" resultType="bupt.sse.SmartCampus.model.Student">
  select s.*
  from scoreanalysis.student as s,scoreanalysis.class as c
  where s.classId=c.classId
  and s.fail = #{fail,jdbcType=INTEGER}
  and s.grade =#{grade,jdbcType=CHAR}
  and (c.collegeId=#{id,jdbcType=VARCHAR} or c.majorId=#{id,jdbcType=VARCHAR})
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>
  <select id="getAscendStudentDataByPageAndId" resultType="bupt.sse.SmartCampus.model.Student">
  select s.*
  from scoreanalysis.student as s,scoreanalysis.studentstudy as ss,scoreanalysis.class as c
  where s.studentId=ss.studentId and s.classId=c.classId
  and ss.ascend = #{ascend,jdbcType=INTEGER}
  and ss.year like #{year,jdbcType=VARCHAR}
  and (c.collegeId=#{id,jdbcType=VARCHAR} or c.majorId=#{id,jdbcType=VARCHAR})
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>

    <!--学生列表-辅导员-->
    <select id="getGrindStudentDataByPage_counselor" resultType="bupt.sse.SmartCampus.model.Student">
  select *
  from scoreanalysis.student as s,scoreanalysis.class as c
  where s.classId=c.classId
  and s.grind = #{grind,jdbcType=INTEGER}
  and c.counselorId =#{counselorId,jdbcType=VARCHAR}
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>
    <select id="getFailStudentDataByPage_counselor" resultType="bupt.sse.SmartCampus.model.Student">
  select *
  from scoreanalysis.student as s,scoreanalysis.class as c
  where s.classId=c.classId
  and s.fail = #{fail,jdbcType=INTEGER}
  and c.counselorId =#{counselorId,jdbcType=VARCHAR}
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>
    <select id="getAscendStudentDataByPage_counselor" resultType="bupt.sse.SmartCampus.model.Student">
  select s.*
  from scoreanalysis.student as s,scoreanalysis.studentstudy as ss,scoreanalysis.class as c
  where s.studentId=ss.studentId and s.classId=c.classId
  and ss.ascend = #{ascend,jdbcType=INTEGER}
  and c.counselorId =#{counselorId,jdbcType=VARCHAR}
  and ss.year like #{year,jdbcType=VARCHAR}
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>

    <select id="getGrindStudentDataByPageAndId_counselor" resultType="bupt.sse.SmartCampus.model.Student">
  select s.*
  from scoreanalysis.student as s,scoreanalysis.class as c
  where s.classId=c.classId
  and s.grind = #{grind,jdbcType=INTEGER}
  and c.classId=#{classId,jdbcType=VARCHAR}
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>
    <select id="getFailStudentDataByPageAndId_counselor" resultType="bupt.sse.SmartCampus.model.Student">
  select s.*
  from scoreanalysis.student as s,scoreanalysis.class as c
  where s.classId=c.classId
  and s.fail = #{fail,jdbcType=INTEGER}
  and c.classId=#{classId,jdbcType=VARCHAR}
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>
    <select id="getAscendStudentDataByPageAndId_counselor" resultType="bupt.sse.SmartCampus.model.Student">
  select s.*
  from scoreanalysis.student as s,scoreanalysis.studentstudy as ss,scoreanalysis.class as c
  where s.studentId=ss.studentId and s.classId=c.classId
  and ss.ascend = #{ascend,jdbcType=INTEGER}
  and ss.year like #{year,jdbcType=VARCHAR}
  and c.classId=#{classId,jdbcType=VARCHAR}
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>


  <select id="getStudentDataByStudentId" resultType="bupt.sse.SmartCampus.model.Student">
    select * from scoreanalysis.student
    where studentId=#{studentId,jdbcType=VARCHAR};
  </select>

  <select id="selectStudentDataByCollegeOrMajorOrGradeOrStudent" resultType="java.util.Map">
  select co.collegeName,co.majorName,s.grade,s.classId,s.studentId,s.studentName
  from student as s,class as cl,college as co
  where s.classId=cl.classId and cl.majorId=co.majorId
    and
    <if test="collegeName!=null">
      co.collegeName like #{collegeName,jdbcType=VARCHAR}
    </if>
    and
    <if test="majorName!=null">
      co.majorName like #{majorName,jdbcType=VARCHAR}
    </if>
    and
    <if test="grade!=null">
      s.grade like #{grade,jdbcType=VARCHAR}
    </if>
    and
    <if test="studentId!=null">
      s.studentId like #{studentId,jdbcType=VARCHAR}
    </if>
    and
    <if test="studentName!=null">
      s.studentName like #{studentName,jdbcType=VARCHAR}
    </if>
  limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>

  <select id="selectStudentSumByCollegeOrMajorOrGradeOrStudent" resultType="java.lang.Integer">
    select count(*)
    from student as s,class as cl,college as co
    where s.classId=cl.classId and cl.majorId=co.majorId
    and
    <if test="collegeName!=null">
      co.collegeName like #{collegeName,jdbcType=VARCHAR}
    </if>
    and
    <if test="majorName!=null">
      co.majorName like #{majorName,jdbcType=VARCHAR}
    </if>
    and
    <if test="grade!=null">
      s.grade like #{grade,jdbcType=VARCHAR}
    </if>
    and
    <if test="studentId!=null">
      s.studentId like #{studentId,jdbcType=VARCHAR}
    </if>
    and
    <if test="studentName!=null">
      s.studentName like #{studentName,jdbcType=VARCHAR}
    </if>
  </select>

  <select id="selectStudentDataByClassOrStudent_counselor" resultType="java.util.Map">
    select co.collegeName,co.majorName,s.grade,s.classId,s.studentId,s.studentName
    from student as s,class as cl,college as co
    where s.classId=cl.classId and cl.majorId=co.majorId
    and cl.counselorId=#{counselorId,jdbcType=VARCHAR}
    and
    <if test="classId!=null">
      s.classId like #{classId,jdbcType=VARCHAR}
    </if>
    and
    <if test="studentId!=null">
      s.studentId like #{studentId,jdbcType=VARCHAR}
    </if>
    and
    <if test="studentName!=null">
      s.studentName like #{studentName,jdbcType=VARCHAR}
    </if>
    limit #{rowNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER};
  </select>

  <select id="selectStudentSumByClassOrStudent_counselor" resultType="java.lang.Integer">
    select count(*)
    from student as s,class as cl,college as co
    where s.classId=cl.classId and cl.majorId=co.majorId
      and cl.counselorId=#{counselorId,jdbcType=VARCHAR}
    and
    <if test="classId!=null">
      s.classId like #{classId,jdbcType=VARCHAR}
    </if>
    and
    <if test="studentId!=null">
      s.studentId like #{studentId,jdbcType=VARCHAR}
    </if>
    and
    <if test="studentName!=null">
      s.studentName like #{studentName,jdbcType=VARCHAR}
    </if>
  </select>

</mapper>